#include "elfformat.h"


std::map<int, std::string> FILE_TYPE
{
	decltype(FILE_TYPE)::value_type(ET_NONE, "No file type"),
	decltype(FILE_TYPE)::value_type(ET_REL, "Relocatable file"),
	decltype(FILE_TYPE)::value_type(ET_EXEC, "Executable file"),
	decltype(FILE_TYPE)::value_type(ET_DYN, "Shared object file"),
	decltype(FILE_TYPE)::value_type(ET_CORE, "Core file"),
	decltype(FILE_TYPE)::value_type(ET_LOPROC, "Beginning of processor-specific codes"),
	decltype(FILE_TYPE)::value_type(ET_HIPROC, "Processor-specific"),
};


std::map<int, std::string> OBJECT_FILE_CLASS
{
	decltype(OBJECT_FILE_CLASS)::value_type(ELFCLASSNONE, "NONE"),
	decltype(OBJECT_FILE_CLASS)::value_type(ELFCLASS32, "ELF32"),
	decltype(OBJECT_FILE_CLASS)::value_type(ELFCLASS64, "ELF64"),
};


std::map<int, std::string> OS_ABI
{
	decltype(OS_ABI)::value_type(ELFOSABI_NONE, "UNIX System V ABI"),
	decltype(OS_ABI)::value_type(ELFOSABI_HPUX, "HP-UX operating system"),
	decltype(OS_ABI)::value_type(ELFOSABI_NETBSD, "NetBSD"),
	decltype(OS_ABI)::value_type(ELFOSABI_GNU, "GNU/Linux"),
	decltype(OS_ABI)::value_type(ELFOSABI_LINUX, "Historical alias for ELFOSABI_GNU."),
	decltype(OS_ABI)::value_type(ELFOSABI_HURD, "GNU/Hurd"),
	decltype(OS_ABI)::value_type(ELFOSABI_SOLARIS, "Solaris"),
	decltype(OS_ABI)::value_type(ELFOSABI_AIX, "AIX"),
	decltype(OS_ABI)::value_type(ELFOSABI_IRIX, "IRIX"),
	decltype(OS_ABI)::value_type(ELFOSABI_FREEBSD, "FreeBSD"),
	decltype(OS_ABI)::value_type(ELFOSABI_TRU64, "TRU64 UNIX"),
	decltype(OS_ABI)::value_type(ELFOSABI_MODESTO, "Novell Modesto"),
	decltype(OS_ABI)::value_type(ELFOSABI_OPENBSD, "OpenBSD"),
	decltype(OS_ABI)::value_type(ELFOSABI_OPENVMS, "OpenVMS"),
	decltype(OS_ABI)::value_type(ELFOSABI_NSK, "Hewlett-Packard Non-Stop Kernel"),
	decltype(OS_ABI)::value_type(ELFOSABI_AROS, "AROS"),
	decltype(OS_ABI)::value_type(ELFOSABI_FENIXOS, "FenixOS"),
	decltype(OS_ABI)::value_type(ELFOSABI_C6000_ELFABI, "Bare-metal TMS320C6000"),
	decltype(OS_ABI)::value_type(ELFOSABI_C6000_LINUX, "Linux TMS320C6000"),
	decltype(OS_ABI)::value_type(ELFOSABI_ARM, "ARM"),
	decltype(OS_ABI)::value_type(ELFOSABI_STANDALONE, "Standalone (embedded) application"),
};


std::map<int, std::string> MACHINE_ARCHITECTURES
{
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_NONE, "No machine"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_M32, "AT&T WE 32100"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SPARC, "SPARC"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_386, "Intel 386"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_68K, "Motorola 68000"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_88K, "Motorola 88000"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_486, "Intel 486 (deprecated)"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_860, "Intel 80860"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MIPS, "MIPS R3000"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_S370, "IBM System/370"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MIPS_RS3_LE, "MIPS RS3000 Little-endian"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_PARISC, "Hewlett-Packard PA-RISC"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_VPP500, "Fujitsu VPP500"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SPARC32PLUS, "Enhanced instruction set SPARC"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_960, "Intel 80960"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_PPC, "PowerPC"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_PPC64, "PowerPC64"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_S390, "IBM System/390"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SPU, "IBM SPU/SPC"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_V800, "NEC V800"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_FR20, "Fujitsu FR20"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_RH32, "TRW RH-32"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_RCE, "Motorola RCE"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ARM, "ARM"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ALPHA, "DEC Alpha"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SH, "Hitachi SH"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SPARCV9, "SPARC V9"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TRICORE, "Siemens TriCore"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ARC, "Argonaut RISC Core"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_H8_300, "Hitachi H8/300"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_H8_300H, "Hitachi H8/300H"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_H8S, "Hitachi H8S"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_H8_500, "Hitachi H8/500"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_IA_64, "Intel IA-64 processor architecture"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MIPS_X, "Stanford MIPS-X"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_COLDFIRE, "Motorola ColdFire"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_68HC12, "Motorola M68HC12"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MMA, "Fujitsu MMA Multimedia Accelerator"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_PCP, "Siemens PCP"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_NCPU, "Sony nCPU embedded RISC processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_NDR1, "Denso NDR1 microprocessor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_STARCORE, "Motorola Star*Core processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ME16, "Toyota ME16 processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ST100, "STMicroelectronics ST100 processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TINYJ, "Advanced Logic Corp. TinyJ embedded processor family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_X86_64, "AMD x86-64 architecture"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_PDSP, "Sony DSP Processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_PDP10, "Digital Equipment Corp. PDP-10"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_PDP11, "Digital Equipment Corp. PDP-11"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_FX66, "Siemens FX66 microcontroller"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ST9PLUS, "STMicroelectronics ST9+ 8/16 bit microcontroller"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ST7, "STMicroelectronics ST7 8-bit microcontroller"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_68HC16, "Motorola MC68HC16 Microcontroller"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_68HC11, "Motorola MC68HC16 Microcontroller"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_68HC08, "Motorola MC68HC16 Microcontroller"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_68HC05, "Motorola MC68HC16 Microcontroller"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SVX, "Silicon Graphics SVx"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ST19, "STMicroelectronics ST19 8-bit microcontroller"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_VAX, "Digital VAX"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_CRIS, "Axis Communications 32-bit embedded processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_JAVELIN, "Infineon Technologies 32-bit embedded processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_FIREPATH, "Element 14 64-bit DSP Processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ZSP, "LSI Logic 16-bit DSP Processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MMIX, "Donald Knuth's educational 64-bit processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_HUANY, "Harvard University machine-independent object files"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_PRISM, "SiTera Prism"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_AVR, "Atmel AVR 8-bit microcontroller"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_FR30, "Fujitsu FR30"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_D10V, "Mitsubishi D10V"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_D30V, "Mitsubishi D30V"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_V850, "NEC v850"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_M32R, "Mitsubishi M32R"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MN10300, "Matsushita MN10300"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MN10200, "Matsushita MN10200"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_PJ, "picoJava"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_OPENRISC, "OpenRISC 32-bit embedded processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ARC_COMPACT, "ARC International ARCompact processor (old spelling/synonym: EM_ARC_A5)"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_XTENSA, "Tensilica Xtensa Architecture"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_VIDEOCORE, "Alphamosaic VideoCore processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TMM_GPP, "Thompson Multimedia General Purpose Processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_NS32K, "National Semiconductor 32000 series"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TPC, "Tenor Network TPC processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SNP1K, "Trebia SNP 1000 processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ST200, "STMicroelectronics (www.st.com) ST200"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_IP2K, "Ubicom IP2xxx microcontroller family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MAX, "MAX Processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_CR, "National Semiconductor CompactRISC microprocessor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_F2MC16, "Fujitsu F2MC16"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MSP430, "Texas Instruments embedded microcontroller msp430"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_BLACKFIN, "Analog Devices Blackfin (DSP) processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SE_C33, "S1C33 Family of Seiko Epson processors"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SEP, "Sharp embedded microprocessor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ARCA, "Arca RISC Microprocessor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_UNICORE, "Microprocessor series from PKU-Unity Ltd. and MPRC of Peking University"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_EXCESS, "eXcess: 16/32/64-bit configurable embedded CPU"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_DXP, "Icera Semiconductor Inc. Deep Execution Processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ALTERA_NIOS2, "Altera Nios II soft-core processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_CRX, "National Semiconductor CompactRISC CRX"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_XGATE, "Motorola XGATE embedded processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_C166, "Infineon C16x/XC16x processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_M16C, "Renesas M16C series microprocessors"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_DSPIC30F, "Microchip Technology dsPIC30F Digital Signal Controller"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_CE, "Freescale Communication Engine RISC core"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_M32C, "Renesas M32C series microprocessors"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TSK3000, "Altium TSK3000 core"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_RS08, "Freescale RS08 embedded processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SHARC, "Analog Devices SHARC family of 32-bit DSP processors"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ECOG2, "Cyan Technology eCOG2 microprocessor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SCORE7, "Sunplus S+core7 RISC processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_DSP24, "New Japan Radio (NJR) 24-bit DSP Processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_VIDEOCORE3, "Broadcom VideoCore III processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_LATTICEMICO32, "RISC processor for Lattice FPGA architecture"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SE_C17, "Seiko Epson C17 family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TI_C6000, "The Texas Instruments TMS320C6000 DSP family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TI_C2000, "The Texas Instruments TMS320C2000 DSP family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TI_C5500, "The Texas Instruments TMS320C55x DSP family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MMDSP_PLUS, "STMicroelectronics 64bit VLIW Data Signal Processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_CYPRESS_M8C, "Cypress M8C microprocessor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_R32C, "Renesas R32C series microprocessors"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TRIMEDIA, "NXP Semiconductors TriMedia architecture family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_HEXAGON, "Qualcomm Hexagon processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_8051, "Intel 8051 and variants"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_STXP7X, "STMicroelectronics STxP7x family of configurable and extensible RISC processors"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_NDS32, "Andes Technology compact code size embedded RISC processor family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ECOG1, "Cyan Technology eCOG1X family"),
	//decltype(MACHINE_ARCHITECTURES)::value_type(EM_ECOG1X, "Cyan Technology eCOG1X family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MAXQ30, "Dallas Semiconductor MAXQ30 Core Micro-controllers"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_XIMO16, "New Japan Radio (NJR) 16-bit DSP Processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MANIK, "M2000 Reconfigurable RISC Microprocessor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_CRAYNV2, "Cray Inc. NV2 vector architecture"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_RX, "Renesas RX family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_METAG, "Imagination Technologies META processor architecture"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_MCST_ELBRUS, "MCST Elbrus general purpose hardware architecture"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ECOG16, "Cyan Technology eCOG16 family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_CR16, "National Semiconductor CompactRISC CR16 16-bit microprocessor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ETPU, "Freescale Extended Time Processing Unit"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_SLE9X, "Infineon Technologies SLE9X core"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_L10M, "Intel L10M"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_K10M, "Intel K10M"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_AARCH64, "ARM AArch64"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_AVR32, "Atmel Corporation 32-bit microprocessor family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_STM8, "STMicroeletronics STM8 8-bit microcontroller"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TILE64, "Tilera TILE64 multicore architecture family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TILEPRO, "Tilera TILEPro multicore architecture family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_CUDA, "NVIDIA CUDA architecture"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_TILEGX, "Tilera TILE-Gx multicore architecture family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_CLOUDSHIELD, "CloudShield architecture family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_COREA_1ST, "KIPO-KAIST Core-A 1st generation processor family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_COREA_2ND, "KIPO-KAIST Core-A 2nd generation processor family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_ARC_COMPACT2, "Synopsys ARCompact V2"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_OPEN8, "Open8 8-bit RISC soft processor core"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_RL78, "Renesas RL78 family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_VIDEOCORE5, "Broadcom VideoCore V processor"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_78KOR, "Renesas 78KOR family"),
	decltype(MACHINE_ARCHITECTURES)::value_type(EM_56800EX, "Freescale 56800EX Digital Signal Controller (DSC)")
};


std::map<int, std::string> PROGRAM_TYPE
{
	decltype(PROGRAM_TYPE)::value_type(PT_NULL, "NULL"),
	decltype(PROGRAM_TYPE)::value_type(PT_LOAD, "LOAD"),
	decltype(PROGRAM_TYPE)::value_type(PT_DYNAMIC, "DYNAMIC"),
	decltype(PROGRAM_TYPE)::value_type(PT_INTERP, "INTERP"),
	decltype(PROGRAM_TYPE)::value_type(PT_NOTE, "NOTE"),
	decltype(PROGRAM_TYPE)::value_type(PT_SHLIB, "SHLIB"),
	decltype(PROGRAM_TYPE)::value_type(PT_PHDR, "PHDR"),
	decltype(PROGRAM_TYPE)::value_type(PT_TLS, "TLS"),
	decltype(PROGRAM_TYPE)::value_type(PT_LOOS, "LOOS"),
	decltype(PROGRAM_TYPE)::value_type(PT_HIOS, "HIOS"),
	decltype(PROGRAM_TYPE)::value_type(PT_LOPROC, "LOPROC"),
	decltype(PROGRAM_TYPE)::value_type(PT_HIPROC, "HIPROC"),
	decltype(PROGRAM_TYPE)::value_type(PT_SUNW_EH_FRAME, "SUNW_EH_FRAME"),
	decltype(PROGRAM_TYPE)::value_type(PT_SUNW_UNWIND, "SUNW_UNWIND"),
	decltype(PROGRAM_TYPE)::value_type(PT_GNU_STACK, "GNU_STACK"),
	decltype(PROGRAM_TYPE)::value_type(PT_GNU_RELRO, "GNU_RELRO"),
	decltype(PROGRAM_TYPE)::value_type(PT_ARM_ARCHEXT, "ARM_ARCHEXT"),
	decltype(PROGRAM_TYPE)::value_type(PT_ARM_EXIDX, "ARM_EXIDX"),
	decltype(PROGRAM_TYPE)::value_type(PT_ARM_UNWIND, "ARM_UNWIND"),
	decltype(PROGRAM_TYPE)::value_type(PT_MIPS_REGINFO, "MIPS_REGINFO"),
	decltype(PROGRAM_TYPE)::value_type(PT_MIPS_RTPROC, "MIPS_RTPROC"),
	decltype(PROGRAM_TYPE)::value_type(PT_MIPS_OPTIONS, "MIPS_OPTIONS")
};


std::map<int, std::string> PROGRAM_FLAG
{
	decltype(PROGRAM_FLAG)::value_type(PF_X, "X"),
	decltype(PROGRAM_FLAG)::value_type(PF_W, "W"),
	decltype(PROGRAM_FLAG)::value_type(PF_R, "R"),
	decltype(PROGRAM_FLAG)::value_type(PF_MASKOS, "MASKOS"),
	decltype(PROGRAM_FLAG)::value_type(PF_MASKPROC, "MASKPROC"),
	decltype(PROGRAM_FLAG)::value_type(3, " WX"),
	decltype(PROGRAM_FLAG)::value_type(5, "R X"),
	decltype(PROGRAM_FLAG)::value_type(6, "RW"),
	decltype(PROGRAM_FLAG)::value_type(7, "RWX"),
};


std::map<int, std::string> SECTION_TYPE
{
	decltype(SECTION_TYPE)::value_type(SHT_NULL, "NULL"),
	decltype(SECTION_TYPE)::value_type(SHT_PROGBITS, "PROGBITS"),
	decltype(SECTION_TYPE)::value_type(SHT_SYMTAB, "SYMTAB"),
	decltype(SECTION_TYPE)::value_type(SHT_STRTAB, "STRTAB"),
	decltype(SECTION_TYPE)::value_type(SHT_RELA, "RELA"),
	decltype(SECTION_TYPE)::value_type(SHT_HASH, "HASH"),
	decltype(SECTION_TYPE)::value_type(SHT_DYNAMIC, "DYNAMIC"),
	decltype(SECTION_TYPE)::value_type(SHT_NOTE, "NOTE"),
	decltype(SECTION_TYPE)::value_type(SHT_NOBITS, "NOBITS"),
	decltype(SECTION_TYPE)::value_type(SHT_REL, "REL"),
	decltype(SECTION_TYPE)::value_type(SHT_SHLIB, "SHLIB"),
	decltype(SECTION_TYPE)::value_type(SHT_DYNSYM, "DYNSYM"),
	decltype(SECTION_TYPE)::value_type(SHT_INIT_ARRAY, "INIT_ARRAY"),
	decltype(SECTION_TYPE)::value_type(SHT_FINI_ARRAY, "FINI_ARRAY"),
	decltype(SECTION_TYPE)::value_type(SHT_PREINIT_ARRAY, "PREINIT_ARRAY"),
	decltype(SECTION_TYPE)::value_type(SHT_GROUP, "GROUP"),
	decltype(SECTION_TYPE)::value_type(SHT_SYMTAB_SHNDX, "SYMTAB_SHNDX"),
	decltype(SECTION_TYPE)::value_type(SHT_LOOS, "LOOS"),
	decltype(SECTION_TYPE)::value_type(SHT_GNU_ATTRIBUTES, "GNU_ATTRIBUTES"),
	decltype(SECTION_TYPE)::value_type(SHT_GNU_HASH, "GNU_HASH"),
	decltype(SECTION_TYPE)::value_type(SHT_GNU_verdef, "GNU_verdef"),
	decltype(SECTION_TYPE)::value_type(SHT_GNU_verneed, "GNU_verneed"),
	decltype(SECTION_TYPE)::value_type(SHT_GNU_versym, "GNU_versym"),
	decltype(SECTION_TYPE)::value_type(SHT_HIOS, "HIOS"),
	decltype(SECTION_TYPE)::value_type(SHT_LOPROC, "LOPROC"),
	decltype(SECTION_TYPE)::value_type(SHT_ARM_EXIDX, "ARM_EXIDX"),
	decltype(SECTION_TYPE)::value_type(SHT_ARM_PREEMPTMAP, "ARM_PREEMPTMAP"),
	decltype(SECTION_TYPE)::value_type(SHT_ARM_ATTRIBUTES, "ARM_ATTRIBUTES"),
	decltype(SECTION_TYPE)::value_type(SHT_ARM_DEBUGOVERLAY, "ARM_DEBUGOVERLAY"),
	decltype(SECTION_TYPE)::value_type(SHT_ARM_OVERLAYSECTION, "ARM_OVERLAYSECTION"),
	decltype(SECTION_TYPE)::value_type(SHT_HEX_ORDERED, "HEX_ORDERED"),
	decltype(SECTION_TYPE)::value_type(SHT_X86_64_UNWIND, "X86_64_UNWIND"),
	decltype(SECTION_TYPE)::value_type(SHT_MIPS_REGINFO, "MIPS_REGINFO"),
	decltype(SECTION_TYPE)::value_type(SHT_MIPS_OPTIONS, "MIPS_OPTIONS"),
	decltype(SECTION_TYPE)::value_type(SHT_HIPROC, "HIPROC"),
	decltype(SECTION_TYPE)::value_type(SHT_LOUSER, "LOUSER"),
	decltype(SECTION_TYPE)::value_type(SHT_HIUSER, "HIUSER")
};


std::map<int, std::string> DYNAMIC_TAG
{
	decltype(DYNAMIC_TAG)::value_type(DT_NULL, "NULL"),
	decltype(DYNAMIC_TAG)::value_type(DT_NEEDED, "NEEDED"),
	decltype(DYNAMIC_TAG)::value_type(DT_PLTRELSZ, "PLTRELSZ"),
	decltype(DYNAMIC_TAG)::value_type(DT_PLTGOT, "PLTGOT"),
	decltype(DYNAMIC_TAG)::value_type(DT_HASH, "HASH"),
	decltype(DYNAMIC_TAG)::value_type(DT_STRTAB, "STRTAB"),
	decltype(DYNAMIC_TAG)::value_type(DT_SYMTAB, "SYMTAB"),
	decltype(DYNAMIC_TAG)::value_type(DT_RELA, "RELA"),
	decltype(DYNAMIC_TAG)::value_type(DT_RELASZ, "RELASZ"),
	decltype(DYNAMIC_TAG)::value_type(DT_RELAENT, "RELAENT"),
	decltype(DYNAMIC_TAG)::value_type(DT_STRSZ, "STRSZ"),
	decltype(DYNAMIC_TAG)::value_type(DT_SYMENT, "SYMENT"),
	decltype(DYNAMIC_TAG)::value_type(DT_INIT, "INIT"),
	decltype(DYNAMIC_TAG)::value_type(DT_FINI, "FINI"),
	decltype(DYNAMIC_TAG)::value_type(DT_SONAME, "SONAME"),
	decltype(DYNAMIC_TAG)::value_type(DT_RPATH, "RPATH"),
	decltype(DYNAMIC_TAG)::value_type(DT_SYMBOLIC, "SYMBOLIC"),
	decltype(DYNAMIC_TAG)::value_type(DT_REL, "REL"),
	decltype(DYNAMIC_TAG)::value_type(DT_RELSZ, "RELSZ"),
	decltype(DYNAMIC_TAG)::value_type(DT_RELENT, "RELENT"),
	decltype(DYNAMIC_TAG)::value_type(DT_PLTREL, "PLTREL"),
	decltype(DYNAMIC_TAG)::value_type(DT_DEBUG, "DEBUG"),
	decltype(DYNAMIC_TAG)::value_type(DT_TEXTREL, "TEXTREL"),
	decltype(DYNAMIC_TAG)::value_type(DT_JMPREL, "JMPREL"),
	decltype(DYNAMIC_TAG)::value_type(DT_BIND_NOW, "BIND_NOW"),
	decltype(DYNAMIC_TAG)::value_type(DT_INIT_ARRAY, "INIT_ARRAY"),
	decltype(DYNAMIC_TAG)::value_type(DT_FINI_ARRAY, "FINI_ARRAY"),
	decltype(DYNAMIC_TAG)::value_type(DT_INIT_ARRAYSZ, "INIT_ARRAYSZ"),
	decltype(DYNAMIC_TAG)::value_type(DT_FINI_ARRAYSZ, "FINI_ARRAYSZ"),
	decltype(DYNAMIC_TAG)::value_type(DT_RUNPATH, "RUNPATH"),
	decltype(DYNAMIC_TAG)::value_type(DT_FLAGS, "FLAGS"),
	decltype(DYNAMIC_TAG)::value_type(DT_ENCODING, "ENCODING"),
	decltype(DYNAMIC_TAG)::value_type(DT_PREINIT_ARRAY, "PREINIT_ARRAY"),
	decltype(DYNAMIC_TAG)::value_type(DT_PREINIT_ARRAYSZ, "PREINIT_ARRAYSZ"),
	decltype(DYNAMIC_TAG)::value_type(DT_LOOS, "LOOS"),
	decltype(DYNAMIC_TAG)::value_type(DT_HIOS, "HIOS"),
	decltype(DYNAMIC_TAG)::value_type(DT_LOPROC, "LOPROC"),
	decltype(DYNAMIC_TAG)::value_type(DT_HIPROC, "HIPROC"),
	decltype(DYNAMIC_TAG)::value_type(DT_GNU_HASH, "GNU_HASH"),
	decltype(DYNAMIC_TAG)::value_type(DT_RELACOUNT, "RELACOUNT"),
	decltype(DYNAMIC_TAG)::value_type(DT_RELCOUNT, "RELCOUNT"),
	decltype(DYNAMIC_TAG)::value_type(DT_FLAGS_1, "FLAGS_1"),
	decltype(DYNAMIC_TAG)::value_type(DT_VERSYM, "VERSYM"),
	decltype(DYNAMIC_TAG)::value_type(DT_VERDEF, "VERDEF"),
	decltype(DYNAMIC_TAG)::value_type(DT_VERDEFNUM, "VERDEFNUM"),
	decltype(DYNAMIC_TAG)::value_type(DT_VERNEED, "VERNEED"),
	decltype(DYNAMIC_TAG)::value_type(DT_VERNEEDNUM, "VERNEEDNUM")
};


std::map<int, std::string> DYNAMIC_ENTRY
{
	decltype(DYNAMIC_ENTRY)::value_type(DT_NULL, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_NEEDED, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_PLTRELSZ, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_PLTGOT, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_HASH, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_STRTAB, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_SYMTAB, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_RELA, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_RELASZ, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_RELAENT, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_STRSZ, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_SYMENT, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_INIT, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_FINI, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_SONAME, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_RPATH, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_SYMBOLIC, ""),
	decltype(DYNAMIC_ENTRY)::value_type(DT_REL, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_RELSZ, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_RELENT, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_PLTREL, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_DEBUG, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_TEXTREL, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_JMPREL, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_BIND_NOW, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_INIT_ARRAY, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_FINI_ARRAY, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_INIT_ARRAYSZ, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_FINI_ARRAYSZ, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_RUNPATH, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_FLAGS, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_ENCODING, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_PREINIT_ARRAY, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_PREINIT_ARRAYSZ, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_LOOS, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_HIOS, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_LOPROC, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_HIPROC, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_GNU_HASH, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_RELACOUNT, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_RELCOUNT, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_FLAGS_1, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_VERSYM, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_VERDEF, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_VERDEFNUM, "val"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_VERNEED, "ptr"),
	decltype(DYNAMIC_ENTRY)::value_type(DT_VERNEEDNUM, "val")
};

std::map<int, std::string> SYMBOL_BINDING
{
	decltype(SYMBOL_BINDING)::value_type(STB_LOCAL, "LOCAL"),
	decltype(SYMBOL_BINDING)::value_type(STB_GLOBAL, "GLOBAL"),
	decltype(SYMBOL_BINDING)::value_type(STB_WEAK, "WEAK"),
	decltype(SYMBOL_BINDING)::value_type(STB_LOOS, "LOOS"),
	decltype(SYMBOL_BINDING)::value_type(STB_HIOS, "HIOS"),
	decltype(SYMBOL_BINDING)::value_type(STB_LOPROC, "LOPROC"),
	decltype(SYMBOL_BINDING)::value_type(STB_HIPROC, "HIPROC")
};

std::map<int, std::string> SYMBOL_TYPES
{
  decltype(SYMBOL_TYPES)::value_type(STT_NOTYPE, "NOTYPE"),
  decltype(SYMBOL_TYPES)::value_type(STT_OBJECT, "OBJECT"),
  decltype(SYMBOL_TYPES)::value_type(STT_FUNC, "FUNC"),
  decltype(SYMBOL_TYPES)::value_type(STT_SECTION, "SECTION"),
  decltype(SYMBOL_TYPES)::value_type(STT_FILE, "FILE"),
  decltype(SYMBOL_TYPES)::value_type(STT_COMMON, "COMMON"),
  decltype(SYMBOL_TYPES)::value_type(STT_TLS, "TLS"),
  decltype(SYMBOL_TYPES)::value_type(STT_LOOS, "LOOS"),
  decltype(SYMBOL_TYPES)::value_type(STT_HIOS, "HIOS"),
  decltype(SYMBOL_TYPES)::value_type(STT_GNU_IFUNC, "GNU_IFUNC"),
  decltype(SYMBOL_TYPES)::value_type(STT_LOPROC, "LOPROC"),
  decltype(SYMBOL_TYPES)::value_type(STT_HIPROC, "HIPROC")
};

std::map<int, std::string> R_386
{
  decltype(R_386)::value_type(R_386_NONE, "R_386_NONE"),
  decltype(R_386)::value_type(R_386_32, "R_386_32"),
  decltype(R_386)::value_type(R_386_PC32, "R_386_PC32"),
  decltype(R_386)::value_type(R_386_GOT32, "R_386_GOT32"),
  decltype(R_386)::value_type(R_386_PLT32, "R_386_PLT32"),
  decltype(R_386)::value_type(R_386_COPY, "R_386_COPY"),
  decltype(R_386)::value_type(R_386_GLOB_DAT, "R_386_GLOB_DAT"),
  decltype(R_386)::value_type(R_386_JUMP_SLOT, "R_386_JUMP_SLOT"),
  decltype(R_386)::value_type(R_386_RELATIVE, "R_386_RELATIVE"),
  decltype(R_386)::value_type(R_386_GOTOFF, "R_386_GOTOFF"),
  decltype(R_386)::value_type(R_386_GOTPC, "R_386_GOTPC"),
  decltype(R_386)::value_type(R_386_32PLT, "R_386_32PLT"),
  decltype(R_386)::value_type(R_386_TLS_TPOFF, "R_386_TLS_TPOFF"),
  decltype(R_386)::value_type(R_386_TLS_IE, "R_386_TLS_IE"),
  decltype(R_386)::value_type(R_386_TLS_GOTIE, "R_386_TLS_GOTIE"),
  decltype(R_386)::value_type(R_386_TLS_LE, "R_386_TLS_LE"),
  decltype(R_386)::value_type(R_386_TLS_GD, "R_386_TLS_GD"),
  decltype(R_386)::value_type(R_386_TLS_LDM, "R_386_TLS_LDM"),
  decltype(R_386)::value_type(R_386_16, "R_386_16"),
  decltype(R_386)::value_type(R_386_PC16, "R_386_PC16"),
  decltype(R_386)::value_type(R_386_8, "R_386_8"),
  decltype(R_386)::value_type(R_386_PC8, "R_386_PC8"),
  decltype(R_386)::value_type(R_386_TLS_GD_32, "R_386_TLS_GD_32"),
  decltype(R_386)::value_type(R_386_TLS_GD_PUSH, "R_386_TLS_GD_PUSH"),
  decltype(R_386)::value_type(R_386_TLS_GD_CALL, "R_386_TLS_GD_CALL"),
  decltype(R_386)::value_type(R_386_TLS_GD_POP, "R_386_TLS_GD_POP"),
  decltype(R_386)::value_type(R_386_TLS_LDM_32, "R_386_TLS_LDM_32"),
  decltype(R_386)::value_type(R_386_TLS_LDM_PUSH, "R_386_TLS_LDM_PUSH"),
  decltype(R_386)::value_type(R_386_TLS_LDM_CALL, "R_386_TLS_LDM_CALL"),
  decltype(R_386)::value_type(R_386_TLS_LDM_POP, "R_386_TLS_LDM_POP"),
  decltype(R_386)::value_type(R_386_TLS_LDO_32, "R_386_TLS_LDO_32"),
  decltype(R_386)::value_type(R_386_TLS_IE_32, "R_386_TLS_IE_32"),
  decltype(R_386)::value_type(R_386_TLS_LE_32, "R_386_TLS_LE_32"),
  decltype(R_386)::value_type(R_386_TLS_DTPMOD32, "R_386_TLS_DTPMOD32"),
  decltype(R_386)::value_type(R_386_TLS_DTPOFF32, "R_386_TLS_DTPOFF32"),
  decltype(R_386)::value_type(R_386_TLS_TPOFF32, "R_386_TLS_TPOFF32"),
  decltype(R_386)::value_type(R_386_TLS_GOTDESC, "R_386_TLS_GOTDESC"),
  decltype(R_386)::value_type(R_386_TLS_DESC_CALL, "R_386_TLS_DESC_CALL"),
  decltype(R_386)::value_type(R_386_TLS_DESC, "R_386_TLS_DESC"),
  decltype(R_386)::value_type(R_386_IRELATIVE, "R_386_IRELATIVE"),
  decltype(R_386)::value_type(R_386_NUM, "R_386_NUM")
};

std::map<int, std::string> R_X86_64
{
  decltype(R_X86_64)::value_type(R_X86_64_NONE, "R_X86_64_NONE"),
  decltype(R_X86_64)::value_type(R_X86_64_64, "R_X86_64_64"),
  decltype(R_X86_64)::value_type(R_X86_64_PC32, "R_X86_64_PC32"),
  decltype(R_X86_64)::value_type(R_X86_64_GOT32, "R_X86_64_GOT32"),
  decltype(R_X86_64)::value_type(R_X86_64_PLT32, "R_X86_64_PLT32"),
  decltype(R_X86_64)::value_type(R_X86_64_COPY, "R_X86_64_COPY"),
  decltype(R_X86_64)::value_type(R_X86_64_GLOB_DAT, "R_X86_64_GLOB_DAT"),
  decltype(R_X86_64)::value_type(R_X86_64_JUMP_SLOT, "R_X86_64_JUMP_SLOT"),
  decltype(R_X86_64)::value_type(R_X86_64_RELATIVE, "R_X86_64_RELATIVE"),
  decltype(R_X86_64)::value_type(R_X86_64_GOTPCREL, "R_X86_64_GOTPCREL"),
  decltype(R_X86_64)::value_type(R_X86_64_32, "R_X86_64_32"),
  decltype(R_X86_64)::value_type(R_X86_64_32S, "R_X86_64_32S"),
  decltype(R_X86_64)::value_type(R_X86_64_16, "R_X86_64_16"),
  decltype(R_X86_64)::value_type(R_X86_64_PC16, "R_X86_64_PC16"),
  decltype(R_X86_64)::value_type(R_X86_64_8, "R_X86_64_8"),
  decltype(R_X86_64)::value_type(R_X86_64_PC8, "R_X86_64_PC8"),
  decltype(R_X86_64)::value_type(R_X86_64_DTPMOD64, "R_X86_64_DTPMOD64"),
  decltype(R_X86_64)::value_type(R_X86_64_DTPOFF64, "R_X86_64_DTPOFF64"),
  decltype(R_X86_64)::value_type(R_X86_64_TPOFF64, "R_X86_64_TPOFF64"),
  decltype(R_X86_64)::value_type(R_X86_64_TLSGD, "R_X86_64_TLSGD"),
  decltype(R_X86_64)::value_type(R_X86_64_TLSLD, "R_X86_64_TLSLD"),
  decltype(R_X86_64)::value_type(R_X86_64_DTPOFF32, "R_X86_64_DTPOFF32"),
  decltype(R_X86_64)::value_type(R_X86_64_GOTTPOFF, "R_X86_64_GOTTPOFF"),
  decltype(R_X86_64)::value_type(R_X86_64_TPOFF32, "R_X86_64_TPOFF32"),
  decltype(R_X86_64)::value_type(R_X86_64_PC64, "R_X86_64_PC64"),
  decltype(R_X86_64)::value_type(R_X86_64_GOTOFF64, "R_X86_64_GOTOFF64"),
  decltype(R_X86_64)::value_type(R_X86_64_GOTPC32, "R_X86_64_GOTPC32"),
  decltype(R_X86_64)::value_type(R_X86_64_GOT64, "R_X86_64_GOT64"),
  decltype(R_X86_64)::value_type(R_X86_64_GOTPCREL64, "R_X86_64_GOTPCREL64"),
  decltype(R_X86_64)::value_type(R_X86_64_GOTPC64, "R_X86_64_GOTPC64"),
  decltype(R_X86_64)::value_type(R_X86_64_GOTPLT64, "R_X86_64_GOTPLT64"),
  decltype(R_X86_64)::value_type(R_X86_64_PLTOFF64, "R_X86_64_PLTOFF64"),
  decltype(R_X86_64)::value_type(R_X86_64_SIZE32, "R_X86_64_SIZE32"),
  decltype(R_X86_64)::value_type(R_X86_64_SIZE64, "R_X86_64_SIZE64"),
  decltype(R_X86_64)::value_type(R_X86_64_GOTPC32_TLSDESC, "R_X86_64_GOTPC32_TLSDESC"),
  decltype(R_X86_64)::value_type(R_X86_64_TLSDESC_CALL, "R_X86_64_TLSDESC_CALL"),
  decltype(R_X86_64)::value_type(R_X86_64_TLSDESC, "R_X86_64_TLSDESC"),
  decltype(R_X86_64)::value_type(R_X86_64_IRELATIVE, "R_X86_64_IRELATIVE")
};

std::map<int, std::string> R_ARM
{
  decltype(R_ARM)::value_type(R_ARM_NONE, "R_ARM_NONE"),
  decltype(R_ARM)::value_type(R_ARM_PC24, "R_ARM_PC24"),
  decltype(R_ARM)::value_type(R_ARM_ABS32, "R_ARM_ABS32"),
  decltype(R_ARM)::value_type(R_ARM_REL32, "R_ARM_REL32"),
  decltype(R_ARM)::value_type(R_ARM_LDR_PC_G0, "R_ARM_LDR_PC_G0"),
  decltype(R_ARM)::value_type(R_ARM_ABS16, "R_ARM_ABS16"),
  decltype(R_ARM)::value_type(R_ARM_ABS12, "R_ARM_ABS12"),
  decltype(R_ARM)::value_type(R_ARM_THM_ABS5, "R_ARM_THM_ABS5"),
  decltype(R_ARM)::value_type(R_ARM_ABS8, "R_ARM_ABS8"),
  decltype(R_ARM)::value_type(R_ARM_SBREL32, "R_ARM_SBREL32"),
  decltype(R_ARM)::value_type(R_ARM_THM_CALL, "R_ARM_THM_CALL"),
  decltype(R_ARM)::value_type(R_ARM_THM_PC8, "R_ARM_THM_PC8"),
  decltype(R_ARM)::value_type(R_ARM_BREL_ADJ, "R_ARM_BREL_ADJ"),
  decltype(R_ARM)::value_type(R_ARM_TLS_DESC, "R_ARM_TLS_DESC"),
  decltype(R_ARM)::value_type(R_ARM_THM_SWI8, "R_ARM_THM_SWI8"),
  decltype(R_ARM)::value_type(R_ARM_XPC25, "R_ARM_XPC25"),
  decltype(R_ARM)::value_type(R_ARM_THM_XPC22, "R_ARM_THM_XPC22"),
  decltype(R_ARM)::value_type(R_ARM_TLS_DTPMOD32, "R_ARM_TLS_DTPMOD32"),
  decltype(R_ARM)::value_type(R_ARM_TLS_DTPOFF32, "R_ARM_TLS_DTPOFF32"),
  decltype(R_ARM)::value_type(R_ARM_TLS_TPOFF32, "R_ARM_TLS_TPOFF32"),
  decltype(R_ARM)::value_type(R_ARM_COPY, "R_ARM_COPY"),
  decltype(R_ARM)::value_type(R_ARM_GLOB_DAT, "R_ARM_GLOB_DAT"),
  decltype(R_ARM)::value_type(R_ARM_JUMP_SLOT, "R_ARM_JUMP_SLOT"),
  decltype(R_ARM)::value_type(R_ARM_RELATIVE, "R_ARM_RELATIVE"),
  decltype(R_ARM)::value_type(R_ARM_GOTOFF32, "R_ARM_GOTOFF32"),
  decltype(R_ARM)::value_type(R_ARM_BASE_PREL, "R_ARM_BASE_PREL"),
  decltype(R_ARM)::value_type(R_ARM_GOT_BREL, "R_ARM_GOT_BREL"),
  decltype(R_ARM)::value_type(R_ARM_PLT32, "R_ARM_PLT32"),
  decltype(R_ARM)::value_type(R_ARM_CALL, "R_ARM_CALL"),
  decltype(R_ARM)::value_type(R_ARM_JUMP24, "R_ARM_JUMP24"),
  decltype(R_ARM)::value_type(R_ARM_THM_JUMP24, "R_ARM_THM_JUMP24"),
  decltype(R_ARM)::value_type(R_ARM_BASE_ABS, "R_ARM_BASE_ABS"),
  decltype(R_ARM)::value_type(R_ARM_ALU_PCREL_7_0, "R_ARM_ALU_PCREL_7_0"),
  decltype(R_ARM)::value_type(R_ARM_ALU_PCREL_15_8, "R_ARM_ALU_PCREL_15_8"),
  decltype(R_ARM)::value_type(R_ARM_ALU_PCREL_23_15, "R_ARM_ALU_PCREL_23_15"),
  decltype(R_ARM)::value_type(R_ARM_LDR_SBREL_11_0_NC, "R_ARM_LDR_SBREL_11_0_NC"),
  decltype(R_ARM)::value_type(R_ARM_ALU_SBREL_19_12_NC, "R_ARM_ALU_SBREL_19_12_NC"),
  decltype(R_ARM)::value_type(R_ARM_ALU_SBREL_27_20_CK, "R_ARM_ALU_SBREL_27_20_CK"),
  decltype(R_ARM)::value_type(R_ARM_TARGET1, "R_ARM_TARGET1"),
  decltype(R_ARM)::value_type(R_ARM_SBREL31, "R_ARM_SBREL31"),
  decltype(R_ARM)::value_type(R_ARM_V4BX, "R_ARM_V4BX"),
  decltype(R_ARM)::value_type(R_ARM_TARGET2, "R_ARM_TARGET2"),
  decltype(R_ARM)::value_type(R_ARM_PREL31, "R_ARM_PREL31"),
  decltype(R_ARM)::value_type(R_ARM_MOVW_ABS_NC, "R_ARM_MOVW_ABS_NC"),
  decltype(R_ARM)::value_type(R_ARM_MOVT_ABS, "R_ARM_MOVT_ABS"),
  decltype(R_ARM)::value_type(R_ARM_MOVW_PREL_NC, "R_ARM_MOVW_PREL_NC"),
  decltype(R_ARM)::value_type(R_ARM_MOVT_PREL, "R_ARM_MOVT_PREL"),
  decltype(R_ARM)::value_type(R_ARM_THM_MOVW_ABS_NC, "R_ARM_THM_MOVW_ABS_NC"),
  decltype(R_ARM)::value_type(R_ARM_THM_MOVT_ABS, "R_ARM_THM_MOVT_ABS"),
  decltype(R_ARM)::value_type(R_ARM_THM_MOVW_PREL_NC, "R_ARM_THM_MOVW_PREL_NC"),
  decltype(R_ARM)::value_type(R_ARM_THM_MOVT_PREL, "R_ARM_THM_MOVT_PREL"),
  decltype(R_ARM)::value_type(R_ARM_THM_JUMP19, "R_ARM_THM_JUMP19"),
  decltype(R_ARM)::value_type(R_ARM_THM_JUMP6, "R_ARM_THM_JUMP6"),
  decltype(R_ARM)::value_type(R_ARM_THM_ALU_PREL_11_0, "R_ARM_THM_ALU_PREL_11_0"),
  decltype(R_ARM)::value_type(R_ARM_THM_PC12, "R_ARM_THM_PC12"),
  decltype(R_ARM)::value_type(R_ARM_ABS32_NOI, "R_ARM_ABS32_NOI"),
  decltype(R_ARM)::value_type(R_ARM_REL32_NOI, "R_ARM_REL32_NOI"),
  decltype(R_ARM)::value_type(R_ARM_ALU_PC_G0_NC, "R_ARM_ALU_PC_G0_NC"),
  decltype(R_ARM)::value_type(R_ARM_ALU_PC_G0, "R_ARM_ALU_PC_G0"),
  decltype(R_ARM)::value_type(R_ARM_ALU_PC_G1_NC, "R_ARM_ALU_PC_G1_NC"),
  decltype(R_ARM)::value_type(R_ARM_ALU_PC_G1, "R_ARM_ALU_PC_G1"),
  decltype(R_ARM)::value_type(R_ARM_ALU_PC_G2, "R_ARM_ALU_PC_G2"),
  decltype(R_ARM)::value_type(R_ARM_LDR_PC_G1, "R_ARM_LDR_PC_G1"),
  decltype(R_ARM)::value_type(R_ARM_LDR_PC_G2, "R_ARM_LDR_PC_G2"),
  decltype(R_ARM)::value_type(R_ARM_LDRS_PC_G0, "R_ARM_LDRS_PC_G0"),
  decltype(R_ARM)::value_type(R_ARM_LDRS_PC_G1, "R_ARM_LDRS_PC_G1"),
  decltype(R_ARM)::value_type(R_ARM_LDRS_PC_G2, "R_ARM_LDRS_PC_G2"),
  decltype(R_ARM)::value_type(R_ARM_LDC_PC_G0, "R_ARM_LDC_PC_G0"),
  decltype(R_ARM)::value_type(R_ARM_LDC_PC_G1, "R_ARM_LDC_PC_G1"),
  decltype(R_ARM)::value_type(R_ARM_LDC_PC_G2, "R_ARM_LDC_PC_G2"),
  decltype(R_ARM)::value_type(R_ARM_ALU_SB_G0_NC, "R_ARM_ALU_SB_G0_NC"),
  decltype(R_ARM)::value_type(R_ARM_ALU_SB_G0, "R_ARM_ALU_SB_G0"),
  decltype(R_ARM)::value_type(R_ARM_ALU_SB_G1_NC, "R_ARM_ALU_SB_G1_NC"),
  decltype(R_ARM)::value_type(R_ARM_ALU_SB_G1, "R_ARM_ALU_SB_G1"),
  decltype(R_ARM)::value_type(R_ARM_ALU_SB_G2, "R_ARM_ALU_SB_G2"),
  decltype(R_ARM)::value_type(R_ARM_LDR_SB_G0, "R_ARM_LDR_SB_G0"),
  decltype(R_ARM)::value_type(R_ARM_LDR_SB_G1, "R_ARM_LDR_SB_G1"),
  decltype(R_ARM)::value_type(R_ARM_LDR_SB_G2, "R_ARM_LDR_SB_G2"),
  decltype(R_ARM)::value_type(R_ARM_LDRS_SB_G0, "R_ARM_LDRS_SB_G0"),
  decltype(R_ARM)::value_type(R_ARM_LDRS_SB_G1, "R_ARM_LDRS_SB_G1"),
  decltype(R_ARM)::value_type(R_ARM_LDRS_SB_G2, "R_ARM_LDRS_SB_G2"),
  decltype(R_ARM)::value_type(R_ARM_LDC_SB_G0, "R_ARM_LDC_SB_G0"),
  decltype(R_ARM)::value_type(R_ARM_LDC_SB_G1, "R_ARM_LDC_SB_G1"),
  decltype(R_ARM)::value_type(R_ARM_LDC_SB_G2, "R_ARM_LDC_SB_G2"),
  decltype(R_ARM)::value_type(R_ARM_MOVW_BREL_NC, "R_ARM_MOVW_BREL_NC"),
  decltype(R_ARM)::value_type(R_ARM_MOVT_BREL, "R_ARM_MOVT_BREL"),
  decltype(R_ARM)::value_type(R_ARM_MOVW_BREL, "R_ARM_MOVW_BREL"),
  decltype(R_ARM)::value_type(R_ARM_THM_MOVW_BREL_NC, "R_ARM_THM_MOVW_BREL_NC"),
  decltype(R_ARM)::value_type(R_ARM_THM_MOVT_BREL, "R_ARM_THM_MOVT_BREL"),
  decltype(R_ARM)::value_type(R_ARM_THM_MOVW_BREL, "R_ARM_THM_MOVW_BREL"),
  decltype(R_ARM)::value_type(R_ARM_TLS_GOTDESC, "R_ARM_TLS_GOTDESC"),
  decltype(R_ARM)::value_type(R_ARM_TLS_CALL, "R_ARM_TLS_CALL"),
  decltype(R_ARM)::value_type(R_ARM_TLS_DESCSEQ, "R_ARM_TLS_DESCSEQ"),
  decltype(R_ARM)::value_type(R_ARM_THM_TLS_CALL, "R_ARM_THM_TLS_CALL"),
  decltype(R_ARM)::value_type(R_ARM_PLT32_ABS, "R_ARM_PLT32_ABS"),
  decltype(R_ARM)::value_type(R_ARM_GOT_ABS, "R_ARM_GOT_ABS"),
  decltype(R_ARM)::value_type(R_ARM_GOT_PREL, "R_ARM_GOT_PREL"),
  decltype(R_ARM)::value_type(R_ARM_GOT_BREL12, "R_ARM_GOT_BREL12"),
  decltype(R_ARM)::value_type(R_ARM_GOTOFF12, "R_ARM_GOTOFF12"),
  decltype(R_ARM)::value_type(R_ARM_GOTRELAX, "R_ARM_GOTRELAX"),
  decltype(R_ARM)::value_type(R_ARM_GNU_VTENTRY, "R_ARM_GNU_VTENTRY"),
  decltype(R_ARM)::value_type(R_ARM_GNU_VTINHERIT, "R_ARM_GNU_VTINHERIT"),
  decltype(R_ARM)::value_type(R_ARM_THM_JUMP11, "R_ARM_THM_JUMP11"),
  decltype(R_ARM)::value_type(R_ARM_THM_JUMP8, "R_ARM_THM_JUMP8"),
  decltype(R_ARM)::value_type(R_ARM_TLS_GD32, "R_ARM_TLS_GD32"),
  decltype(R_ARM)::value_type(R_ARM_TLS_LDM32, "R_ARM_TLS_LDM32"),
  decltype(R_ARM)::value_type(R_ARM_TLS_LDO32, "R_ARM_TLS_LDO32"),
  decltype(R_ARM)::value_type(R_ARM_TLS_IE32, "R_ARM_TLS_IE32"),
  decltype(R_ARM)::value_type(R_ARM_TLS_LE32, "R_ARM_TLS_LE32"),
  decltype(R_ARM)::value_type(R_ARM_TLS_LDO12, "R_ARM_TLS_LDO12"),
  decltype(R_ARM)::value_type(R_ARM_TLS_LE12, "R_ARM_TLS_LE12"),
  decltype(R_ARM)::value_type(R_ARM_TLS_IE12GP, "R_ARM_TLS_IE12GP"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_0, "R_ARM_PRIVATE_0"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_1, "R_ARM_PRIVATE_1"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_2, "R_ARM_PRIVATE_2"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_3, "R_ARM_PRIVATE_3"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_4, "R_ARM_PRIVATE_4"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_5, "R_ARM_PRIVATE_5"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_6, "R_ARM_PRIVATE_6"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_7, "R_ARM_PRIVATE_7"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_8, "R_ARM_PRIVATE_8"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_9, "R_ARM_PRIVATE_9"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_10, "R_ARM_PRIVATE_10"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_11, "R_ARM_PRIVATE_11"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_12, "R_ARM_PRIVATE_12"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_13, "R_ARM_PRIVATE_13"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_14, "R_ARM_PRIVATE_14"),
  decltype(R_ARM)::value_type(R_ARM_PRIVATE_15, "R_ARM_PRIVATE_15"),
  decltype(R_ARM)::value_type(R_ARM_ME_TOO, "R_ARM_ME_TOO"),
  decltype(R_ARM)::value_type(R_ARM_THM_TLS_DESCSEQ16, "R_ARM_THM_TLS_DESCSEQ16"),
  decltype(R_ARM)::value_type(R_ARM_THM_TLS_DESCSEQ32, "R_ARM_THM_TLS_DESCSEQ32")
};
